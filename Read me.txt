組別:13
111213037 李昱杰
111213003 蔡旻岑
111213028 張嘉心
111213038 陳冠哲


Flask 的資料庫工具擴展，簡化資料庫操作，更直觀的方式管理資料庫：pip install flask-sqlalchemy

*第13組分工表
(我們主要是將工作分為:顧客、商家、外送員、平台方四個角色，以及其他細項工作。每位成員各認領一角色)


111213003 蔡旻岑 顧客角色(點餐、購物車、訂單)、訂單評價、DB設計

111213028 張嘉心 商家角色、前端設計、DB設計

111213037 李昱杰 註冊、登入、平台、外送員程式合併、DB設計

111213038 陳冠哲 外送員角色、DB設計、外送平台及DB講解




*主要程式解析


templates: 所有前端HTML檔

app.py: 各功能及前端路由連接(包括外送員SQL)

databass.py: 商家連接資料庫及sql語法

db.py: 顧客連接資料庫及sql語法

auth.py: 身分驗證及註冊帳號


平台 - 平台登入判別根據不同角色role值導入到各自網頁。
(role值分別對應到 1 顧客 2 商家 3 平台 4 外送員)

顧客 - 顧客最主要部分有兩個
1、抓取C_id
我們會在@app.route('/customer_home')路由中藉由登入的user_id來判定抓取C_id，
若沒有抓取到C_id的值，代表說其身分為非顧客，我們將在@app.route('/restaurant/<int:restaurant_id>/add_to_cart')中偵測，
若C_id並非符合規定，則將使用者踢回到登入頁面。
(這樣的方式可以有效避免非顧客的使用者來進行顧客介面點餐，造成出錯的情況發生。)

2、送出訂單 (抓取到O_id)
因為我們菜品細項加入到購物車時，是加入到items資料表，而在最終彙整成一個訂單時，我們需要一個order_id來進行彙整，
因此在@app.route('/update_order_id')當中，我們會先抓取目前orders資料表中訂單目前的編號，
並且將在items資料中剛剛點餐的幾個菜品細項加上order_id，這樣就可以將相同order_id的菜品彙整成一筆訂單。
(這樣能夠達成彙整訂單的同時，也能保留訂單細項的呈現。)




